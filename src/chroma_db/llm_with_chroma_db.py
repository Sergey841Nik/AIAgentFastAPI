import uuid
from typing import Sequence

from langchain_gigachat.chat_models import GigaChat
from langchain_core.tools import BaseTool
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import InMemorySaver
from langchain_core.runnables import RunnableConfig
from langchain_core.messages import HumanMessage, SystemMessage

from src.config import setup_logger, settings
from src.chroma_db.functions import save_file


logger = setup_logger(__name__)

class ChatWithLLM:
    def __init__(self, tools: Sequence[BaseTool] = [save_file]) -> None:
        llm = GigaChat(
            credentials=settings.GIGACHAT_API_KEY,
            temperature=settings.TEMPERATURE_LLM,
            model=settings.MODEL_LLM_NAME,
            scope=settings.SCOPE_LLM,
            verify_ssl_certs=False,
            )
        self._config: RunnableConfig = {
                "configurable": {"thread_id": uuid.uuid4().hex}}
        
        self.agent = create_react_agent(
            llm,
            tools=tools,
            checkpointer=InMemorySaver(),
            )
        
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å GigaChat —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    def response(
            self, 
            query: str, 
            attachments: str | None=None,
            ):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    
        messages = [
            SystemMessage(content="""
                –¢—ã AI-–ø–æ–º–æ—â–Ω–∏–∫, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –¢—ã —É–º–µ–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É. 
                –¢—ã —É–º–µ–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.
                –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –±–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç—Ç—É–¥–∞.
                
                –ü—Ä–∞–≤–∏–ª–∞:
                1. –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å—É—Ç–∏, –±–µ–∑ —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
                2. –ü–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–∑—ã–≤–∞–π —Ñ—É–Ω–∫—Ü–∏—é save_file
                """ 
            ),
            HumanMessage(
                content = f"–í–æ–ø—Ä–æ—Å: {query}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {attachments}"
                
            ),
        ]
        logger.info("üîÑ –ì–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: ¬´%s¬ª", query)
        try:
            result = self.agent.invoke(
                {"messages": messages},
                config=self._config,
            )
            return result["messages"][-1].content
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: %s", e)
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
        
    