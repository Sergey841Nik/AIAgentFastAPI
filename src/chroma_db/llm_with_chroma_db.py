from typing import Any

from langchain_gigachat import GigaChat
from langchain_core.messages import HumanMessage, SystemMessage, ToolMessage

from src.config import setup_logger, settings
from src.chroma_db.functions import save_file


logger = setup_logger(__name__)

class ChatWithLLM:
    def __init__(self) -> None:
        self.llm = GigaChat(
            credentials=settings.GIGACHAT_API_KEY,
            temperature=settings.TEMPERATURE_LLM,
            model=settings.MODEL_LLM_NAME,
            scope=settings.SCOPE_LLM,
            verify_ssl_certs=False,
            )
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å GigaChat —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    async def response(self, query: str, formatted_context: str, tools: list):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        messages = [
            SystemMessage(content="""
                –¢—ã AI-–ø–æ–º–æ—â–Ω–∏–∫, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –¢—ã —É–º–µ–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É. 
                –¢—ã —É–º–µ–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
                
                –ü—Ä–∞–≤–∏–ª–∞:
                1. –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å—É—Ç–∏, –±–µ–∑ —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
                2. –ü–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–∑—ã–≤–∞–π —Ñ—É–Ω–∫—Ü–∏—é save_file
                """,
            ),
            HumanMessage(
                content = f"–í–æ–ø—Ä–æ—Å: {query}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {formatted_context}"
            ),
        ]
        logger.info("üîÑ –ì–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: ¬´%s¬ª", query)
        try:
            llm_with_tools = self.llm.bind_tools(tools)

            ai_msg = await llm_with_tools.ainvoke(messages)
            
            messages.append(ai_msg)

            if ai_msg.tool_calls:
                # –ú–æ–¥–µ–ª—å –≤—ã–∑–≤–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—é
                for tool_call in ai_msg.tool_calls:
                    selected_tool = {"save_file": save_file}[tool_call["name"].lower()]
                    tool_output = await selected_tool.ainvoke(tool_call["args"])
                    messages.append(ToolMessage(tool_output, tool_call_id=tool_call["id"]))
                    logger.info("‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–∑–≤–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—é %s –∏ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: %s", tool_call["name"], tool_output)
                response = await llm_with_tools.ainvoke(messages)

                return response.content
            
            else:
                # –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–µ–∑ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
                response = await llm_with_tools.ainvoke(messages)
                return response.content
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: %s", e)
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."