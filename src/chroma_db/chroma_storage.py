from logging import Logger
import time
import shutil
from typing import Literal
from pathlib import Path

from langchain_core.documents import Document
import torch
from langchain_chroma import Chroma
from langchain_huggingface import HuggingFaceEmbeddings

from src.config import BASE_DIR, settings, setup_logger
from src.chroma_db.utils import document_generator

logger: Logger = setup_logger(__name__) 

class ChromaVectorStorage:
   """
   –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –≤–µ–∫—Ç–æ—Ä–æ–≤ Chroma.

   Args:
       name_vector_storage (str): –ò–º—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤.

   Attributes:
       name_vector_storage (str): –ò–º—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤.
       _store (Chroma | None): –û–±—ä–µ–∫—Ç Chroma –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
   """

   def __init__(self, name_vector_storage) -> None:
       """
       –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É—Å—Ç–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤ c –∏–º–µ–Ω–µ–º name_vector_storage.
       –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ init().
       """
       self.name_vector_storage = name_vector_storage
       self._store: Chroma | None = None

   def create(
           self,
           folder_path: Path,
           persist_dir: str,
           embedding_model: str = settings.LM_MODEL_NAME
       ) -> Chroma:
       """
        –°–æ–∑–¥–∞–µ—Ç ChromaDB –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
            persist_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î
            embedding_model: –ú–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        Return: –û–±—ä–µ–∫—Ç ChromaDB
        Raises:
           Exception: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Chroma
       """
       try:
           start_time: float = time.time()
           logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
           # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: GPU –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ CPU
           device: Literal['cuda'] | Literal['cpu'] = "cuda" if torch.cuda.is_available() else "cpu"
           embeddings = HuggingFaceEmbeddings(
                   model_name=embedding_model,
                   model_kwargs={"device": device},
                   encode_kwargs={"normalize_embeddings": True},
               )
           logger.info("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ %.2f —Å–µ–∫", time.time() - start_time)

           documents = list(document_generator(folder_path))

           logger.info("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: %d", len(documents))
           ids: list[str] = [f"doc_{i}" for i in range(len(documents))]

           logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Chroma...")
           db = Chroma.from_documents(
               documents=documents,
               embedding=embeddings,
               persist_directory=persist_dir,
               collection_name=self.name_vector_storage,
               ids=ids
           )
           logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ %.2f —Å–µ–∫", time.time() - start_time)
           shutil.rmtree(folder_path)
           logger.info("–ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
           
           return db
       except Exception as e:
           logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Chroma: %s", str(e))
           raise
                   

   async def init(self):
       """
       –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Chroma.
       –°–æ–∑–¥–∞–µ—Ç embeddings –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É—è CUDA –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ.
       """
       logger.info("ü§î –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaVectorStore...")
       try:
           # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: GPU –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ CPU
           device: Literal['cuda'] | Literal['cpu'] = "cuda" if torch.cuda.is_available() else "cpu"
           logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: %s", device)

           # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
           embeddings = HuggingFaceEmbeddings(
               model_name=settings.LM_MODEL_NAME,
               model_kwargs={"device": device},
               encode_kwargs={"normalize_embeddings": True},
           )

           # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Chroma
           self._store = Chroma(
               persist_directory=BASE_DIR / "src" / "chroma_db" / "vector_db",
               embedding_function=embeddings,
               collection_name=self.name_vector_storage,
           )

           logger.info(
               "‚úÖ ChromaVectorStorage —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏  \
               '%s' –≤ '%s/src/chroma_db/vector_db'",
               self.name_vector_storage, BASE_DIR
           )
       except Exception as e:
           logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChromaVectorStorage: %s", e)
           raise

   async def asimilarity_search(self, query: str, with_score: bool, k: int = 5) -> list:
       """
       –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Chroma.

       Args:
           query (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
           with_score (bool): –í–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ü–µ–Ω–∫—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
           k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

       Returns:
           list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –µ—Å–ª–∏ with_score=True

       Raises:
           RuntimeError: –ï—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
       """
       if not self._store:
           raise RuntimeError("ChromaVectorStore is not initialized.")

       logger.info("üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: ¬´%s¬ª, top_k=%s", query, k)
       try:
           if with_score:
               results: list[tuple[Document, float]] = await self._store.asimilarity_search_with_score(
                   query=query, k=k
               )
           else:
               results: list[Document] = await self._store.asimilarity_search(query=query, k=k)

           logger.info("üìÑ –ù–∞–π–¥–µ–Ω–æ %s —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.", len(results))
           return results
       except Exception as e:
           logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: %s", e)
           raise

if __name__ == "__main__":
    vector_storage = ChromaVectorStorage(name_vector_storage="my_collection_test")
    vector_storage.create(folder_path=Path(BASE_DIR / "upload_files" / "test"), persist_dir="src/chroma_db/vector_db")
   